{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/Architecton/StraightAs/1.0.0"
  } ],
  "info" : {
    "description" : "Documentation for the StraightAs API\n",
    "version" : "1.0.0",
    "title" : "StraightAs"
  },
  "tags" : [ {
    "name" : "Authentication",
    "description" : "Log in, sign up, rights"
  }, {
    "name" : "Users",
    "description" : "User management"
  }, {
    "name" : "Timetable",
    "description" : "Timetable management"
  }, {
    "name" : "Calendar",
    "description" : "Calendar management"
  }, {
    "name" : "Todo",
    "description" : "Todo list management"
  }, {
    "name" : "Database",
    "description" : "Database management"
  } ],
  "paths" : {
    "/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get all users in the database",
        "operationId" : "userGetAll",
        "responses" : {
          "200" : {
            "description" : "Users were successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot find users"
          },
          "500" : {
            "description" : "Error while getting users"
          }
        }
      },
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Add a new user to the database",
        "operationId" : "userAddNew",
        "responses" : {
          "201" : {
            "description" : "User successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request parameters"
          },
          "500" : {
            "description" : "Error creating new user or sending confirmation e-mail"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "surname" : {
                    "type" : "string"
                  },
                  "username" : {
                    "type" : "string",
                    "description" : "username - primary key"
                  },
                  "password" : {
                    "type" : "string"
                  },
                  "email" : {
                    "type" : "string"
                  },
                  "gender" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/login" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Log in",
        "operationId" : "logIn",
        "responses" : {
          "200" : {
            "description" : "Log in successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "token" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request parameters"
          },
          "401" : {
            "description" : "Invalid log in credentials"
          },
          "500" : {
            "description" : "Error trying to log in"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string"
                  },
                  "password" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{idUser}/admin" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Promote user to an administrator",
        "operationId" : "promoteUserToAdmin",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "user's ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User successfully promoted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request parameters"
          },
          "401" : {
            "description" : "Not authorized to perform action"
          },
          "404" : {
            "description" : "User with specified id not found"
          },
          "500" : {
            "description" : "Error saving user data"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "admin" : {
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{idUser}/eventadmin" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Promote user to an event administrator",
        "operationId" : "promoteUserToEventAdmin",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "user's ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User successfully promoted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request parameters"
          },
          "401" : {
            "description" : "Not authorized to perform action"
          },
          "404" : {
            "description" : "User with specified id not found"
          },
          "500" : {
            "description" : "Error saving user data"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "admin" : {
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{idUser}/{validationCode}" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "validate mail",
        "operationId" : "validateMail",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "user's ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validationCode",
          "in" : "path",
          "description" : "validation code associated with the account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "validation successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request parameters"
          }
        }
      }
    },
    "/users/{idUser}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Find user by ID",
        "description" : "Returns a single user matching the ID",
        "operationId" : "getUserByID",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "user's ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving user"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete a user from the database",
        "operationId" : "userDelete",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "User successfully deleted"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not founds"
          }
        }
      }
    },
    "/todolists" : {
      "get" : {
        "tags" : [ "Todo" ],
        "summary" : "Get all todo lists of all users",
        "operationId" : "todolistGetAll",
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved todo lists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TodoList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request parameters"
          },
          "404" : {
            "description" : "User or todo list with specified id not found"
          },
          "500" : {
            "description" : "Error retrieving user with specified id or todo list with specified id"
          }
        }
      }
    },
    "/users/{idUser}/todolists/{idTodoList}" : {
      "get" : {
        "tags" : [ "Todo" ],
        "summary" : "Find todo list by ID",
        "operationId" : "todoListGetByID",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoList",
          "in" : "path",
          "description" : "ID of todo list",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Todo list successfuly retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TodoList"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or todo list with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving todo list"
          }
        }
      },
      "post" : {
        "tags" : [ "Todo" ],
        "summary" : "Create new item on todo list",
        "operationId" : "todoListAddNew",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoList",
          "in" : "path",
          "description" : "ID of todo list",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Todo list item successfuly created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TodoListItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or todo list with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving retrieving todo list or saving todo list item"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "description" : {
                    "type" : "string"
                  },
                  "dueDate" : {
                    "type" : "integer"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Todo" ],
        "summary" : "Delete todo list with specified id",
        "operationId" : "deleteTodoListByID",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoList",
          "in" : "path",
          "description" : "ID of todo list",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "todo list successfully deleted"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or todo list with specified ID not found"
          },
          "500" : {
            "description" : "Error deleting todo list"
          }
        }
      }
    },
    "/users/{idUser}/todolists" : {
      "get" : {
        "tags" : [ "Todo" ],
        "summary" : "Get all todo lists of user",
        "operationId" : "todoListGetAll",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "data successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TodoList"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving todo lists"
          }
        }
      },
      "post" : {
        "tags" : [ "Todo" ],
        "summary" : "Create a new empty todo list",
        "operationId" : "todoListGetData",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "todo list successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TodoList"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found"
          },
          "500" : {
            "description" : "Error saving todo list"
          }
        }
      }
    },
    "/users/{idUser}/todolists/{idTodoList}/{idTodoListItem}" : {
      "get" : {
        "tags" : [ "Todo" ],
        "summary" : "Get todo list item by ID",
        "operationId" : "todoListGetItemById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoList",
          "in" : "path",
          "description" : "ID of todo list",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoListItem",
          "in" : "path",
          "description" : "ID of todo list item",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "data successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TodoListItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or todo list with specified ID not found or todo list item with specified id not found"
          },
          "500" : {
            "description" : "Error retrieving todo list or todo list item"
          }
        }
      },
      "put" : {
        "tags" : [ "Todo" ],
        "summary" : "Edit todo list item",
        "operationId" : "todoListEditItemById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoList",
          "in" : "path",
          "description" : "ID of todo list",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoListItem",
          "in" : "path",
          "description" : "ID of todo list item",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "data successfully edited",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TodoListItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or todo list with specified ID not found or todo list item with specified id not found"
          },
          "500" : {
            "description" : "Error retrieving todo list or todo list item"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "description" : {
                    "type" : "string"
                  },
                  "dueDate" : {
                    "type" : "integer"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Todo" ],
        "summary" : "delete todo list item",
        "operationId" : "todoListDeleteItemById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoList",
          "in" : "path",
          "description" : "ID of todo list",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoListItem",
          "in" : "path",
          "description" : "ID of todo list item",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "todo list item successfuly deleted"
          },
          "400" : {
            "description" : "Bad parameters"
          },
          "404" : {
            "description" : "User with specified ID not found or todo list with specified ID not found or todo list item with specified item not found"
          },
          "500" : {
            "description" : "Error retrieving todo list"
          }
        }
      }
    },
    "/users/{idUser}/todolists/{idTodoList}/{idTodoListItem}/status" : {
      "post" : {
        "tags" : [ "Todo" ],
        "summary" : "Set completion property of todo list item",
        "operationId" : "setTodoItemStatus",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoList",
          "in" : "path",
          "description" : "ID of todo list",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTodoListItem",
          "in" : "path",
          "description" : "ID of todo list item",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "status updated successfuly",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TodoListItem"
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot find user with specified id or todo list with specified id or todo list item with specified id"
          },
          "500" : {
            "description" : "Error saving updated todo list item"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "completed" : {
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/timetables" : {
      "get" : {
        "tags" : [ "Timetable" ],
        "summary" : "Get all timetables of all users",
        "operationId" : "timetableGetAll",
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved todo lists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Timetable"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request parameters"
          },
          "404" : {
            "description" : "User or todo list with specified id not found"
          },
          "500" : {
            "description" : "Error retrieving user with specified id or todo list with specified id"
          }
        }
      }
    },
    "/users/{idUser}/timetables/{idTimetable}" : {
      "get" : {
        "tags" : [ "Timetable" ],
        "summary" : "Find timetable by ID",
        "operationId" : "timetableGetByID",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTimetable",
          "in" : "path",
          "description" : "ID of timetable",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Timetable list successfuly retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Timetable"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or timetable with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving timetables"
          }
        }
      },
      "post" : {
        "tags" : [ "Timetable" ],
        "summary" : "Create new event on timetable",
        "operationId" : "TimetableItemAddNew",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTimetable",
          "in" : "path",
          "description" : "ID of timetable",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Timetable successfuly created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimetableEvent"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or timetable with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving retrieving timetable or saving timetable event"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "title" : {
                    "type" : "string"
                  },
                  "day" : {
                    "type" : "integer"
                  },
                  "hour" : {
                    "type" : "integer"
                  },
                  "duration" : {
                    "type" : "integer"
                  },
                  "color" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Timetable" ],
        "summary" : "Delete timetable with specified id",
        "operationId" : "deleteTimetableById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTimetable",
          "in" : "path",
          "description" : "ID of Timetable",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Timetable successfully deleted"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or timetable with specified ID not found"
          },
          "500" : {
            "description" : "Error deleting timetable"
          }
        }
      }
    },
    "/users/{idUser}/timetables" : {
      "get" : {
        "tags" : [ "Timetable" ],
        "summary" : "Get all timetables of user",
        "operationId" : "timetableGetAllUser",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "data successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Timetable"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving timetables"
          }
        }
      },
      "post" : {
        "tags" : [ "Timetable" ],
        "summary" : "Create a new empty timetable",
        "operationId" : "timetableGetData",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "timetable successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Timetable"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found"
          },
          "500" : {
            "description" : "Error saving timetable"
          }
        }
      }
    },
    "/users/{idUser}/timetables/{idTimetable}/{idTimetableEvent}" : {
      "get" : {
        "tags" : [ "Timetable" ],
        "summary" : "Get timetable event by ID",
        "operationId" : "timetableGetItemById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTimetable",
          "in" : "path",
          "description" : "ID of timetable",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTimetableEvent",
          "in" : "path",
          "description" : "ID of timetable item",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "data successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimetableEvent"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or timetable with specified ID not found or timetable item with specified id not found"
          },
          "500" : {
            "description" : "Error retrieving timetable or timetable item"
          }
        }
      },
      "put" : {
        "tags" : [ "Timetable" ],
        "summary" : "Edit timetable event",
        "operationId" : "timetableEditEventById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTimetable",
          "in" : "path",
          "description" : "ID of timetable",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTimetableEvent",
          "in" : "path",
          "description" : "ID of timetable event",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "data successfully edited",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimetableEvent"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or timetable with specified ID not found or timetable event with specified id not found"
          },
          "500" : {
            "description" : "Error retrieving timetable or timetable event"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "title" : {
                    "type" : "string"
                  },
                  "color" : {
                    "type" : "string"
                  },
                  "duration" : {
                    "type" : "integer"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Timetable" ],
        "summary" : "delete timetable event",
        "operationId" : "timetableEventDeleteById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTimetable",
          "in" : "path",
          "description" : "ID of timetable",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idTimetableEvent",
          "in" : "path",
          "description" : "ID of timetable event",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "timetable event successfuly deleted"
          },
          "400" : {
            "description" : "Bad parameters"
          },
          "404" : {
            "description" : "User with specified ID not found or timetable with specified ID not found or timetable event with specified item not found"
          },
          "500" : {
            "description" : "Error retrieving timetables"
          }
        }
      }
    },
    "/calendars" : {
      "get" : {
        "tags" : [ "Calendar" ],
        "summary" : "Get all calendars of all users",
        "operationId" : "calendarGetAll",
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved calendars",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request parameters"
          },
          "404" : {
            "description" : "User or calendar with specified id not found"
          },
          "500" : {
            "description" : "Error retrieving calendar with specified id or calendar with specified id"
          }
        }
      }
    },
    "/users/{idUser}/calendars/{idCalendar}" : {
      "get" : {
        "tags" : [ "Calendar" ],
        "summary" : "Find calendar by ID",
        "operationId" : "calendarGetByID",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idCalendar",
          "in" : "path",
          "description" : "ID of calendar",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Calendar list successfuly retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or calendar with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving calendars"
          }
        }
      },
      "post" : {
        "tags" : [ "Calendar" ],
        "summary" : "Create new event on calendar",
        "operationId" : "CalendarEventAddNew",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idCalendar",
          "in" : "path",
          "description" : "ID of calendar",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Calendar successfuly created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CalendarEvent"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or calendar with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving retrieving calendar or saving calendar event"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "title" : {
                    "type" : "string"
                  },
                  "description" : {
                    "type" : "integer"
                  },
                  "year" : {
                    "type" : "integer"
                  },
                  "month" : {
                    "type" : "integer"
                  },
                  "day" : {
                    "type" : "integer"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Calendar" ],
        "summary" : "Delete calendar with specified id",
        "operationId" : "deleteCalendarById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idCalendar",
          "in" : "path",
          "description" : "ID of Calendar",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Calendar successfully deleted"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or calendar with specified ID not found"
          },
          "500" : {
            "description" : "Error deleting calendar"
          }
        }
      }
    },
    "/users/{idUser}/calendars" : {
      "get" : {
        "tags" : [ "Calendar" ],
        "summary" : "Get all calendars of user",
        "operationId" : "calendarGetAllUser",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "data successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found"
          },
          "500" : {
            "description" : "Error retrieving calendars"
          }
        }
      },
      "post" : {
        "tags" : [ "Calendar" ],
        "summary" : "Create a new empty calendar",
        "operationId" : "calendarGetData",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "calendar successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found"
          },
          "500" : {
            "description" : "Error saving calendar"
          }
        }
      }
    },
    "/users/{idUser}/calendars/{idCalendar}/{idCalendarEvent}" : {
      "get" : {
        "tags" : [ "Calendar" ],
        "summary" : "Get calendar event by ID",
        "operationId" : "calendarGetItemById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idCalendar",
          "in" : "path",
          "description" : "ID of calendar",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idCalendarEvent",
          "in" : "path",
          "description" : "ID of calendar item",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "data successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CalendarEvent"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or calendar with specified ID not found or calendar event with specified id not found"
          },
          "500" : {
            "description" : "Error retrieving calendar or calendar item"
          }
        }
      },
      "put" : {
        "tags" : [ "Calendar" ],
        "summary" : "Edit calendar event",
        "operationId" : "calendarEditEventById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idCalendar",
          "in" : "path",
          "description" : "ID of timetable",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idCalendarEvent",
          "in" : "path",
          "description" : "ID of calendar event",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "data successfully edited",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CalendarEvent"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User with specified ID not found or calendar with specified ID not found or calendar event with specified id not found"
          },
          "500" : {
            "description" : "Error retrieving calendar or calendar event"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "title" : {
                    "type" : "string"
                  },
                  "description" : {
                    "type" : "string"
                  },
                  "year" : {
                    "type" : "integer"
                  },
                  "month" : {
                    "type" : "integer"
                  },
                  "day" : {
                    "type" : "integer"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Calendar" ],
        "summary" : "delete calendar event",
        "operationId" : "calendarEventDeleteById",
        "parameters" : [ {
          "name" : "idUser",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idCalendar",
          "in" : "path",
          "description" : "ID of timetable",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idCalendarEvent",
          "in" : "path",
          "description" : "ID of calendar event",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "calendar event successfuly deleted"
          },
          "400" : {
            "description" : "Bad parameters"
          },
          "404" : {
            "description" : "User with specified ID not found or calendar with specified ID not found or calendar event with specified item not found"
          },
          "500" : {
            "description" : "Error retrieving calendar"
          }
        }
      }
    },
    "/station/closest" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Get data for closest LPP stations",
        "operationId" : "closestLPP",
        "responses" : {
          "200" : {
            "description" : "Data successfuly retrieved"
          },
          "500" : {
            "description" : "Error"
          }
        }
      }
    },
    "/station/arrivals/{stationName}" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Get arrivals for specified LPP station",
        "operationId" : "LPPArrivalData",
        "parameters" : [ {
          "name" : "stationName",
          "in" : "path",
          "description" : "Station name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Data successfuly retrieved"
          },
          "500" : {
            "description" : "Error"
          }
        }
      }
    },
    "/restavracije/closest" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Get data of closest restaurants",
        "operationId" : "restaurantClosestData",
        "responses" : {
          "200" : {
            "description" : "Data successfuly retrieved"
          },
          "500" : {
            "description" : "Error"
          }
        }
      }
    },
    "/restavracije" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Get data of all restaurants",
        "operationId" : "restaurantAllData",
        "responses" : {
          "200" : {
            "description" : "Data successfuly retrieved"
          },
          "500" : {
            "description" : "Error"
          }
        }
      }
    },
    "/restavracije/{idRestaurant}" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Get data of restaurant with specified id",
        "operationId" : "restauranById",
        "parameters" : [ {
          "name" : "idRestaurant",
          "in" : "path",
          "description" : "id of restaurant",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Data successfuly retrieved"
          },
          "500" : {
            "description" : "Error"
          }
        }
      }
    },
    "/restavracije/name/{nameRestaurant}" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Get data of restaurant with specified id",
        "operationId" : "restaurantbyNameData",
        "parameters" : [ {
          "name" : "nameRestaurant",
          "in" : "path",
          "description" : "name of restaurant",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Data successfuly retrieved"
          },
          "500" : {
            "description" : "Error"
          }
        }
      }
    },
    "/mesta" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Get all unique cities",
        "operationId" : "uniqueCities",
        "responses" : {
          "200" : {
            "description" : "Data successfuly retrieved"
          },
          "500" : {
            "description" : "Error"
          }
        }
      }
    },
    "/restavracije/mesto/{cityName}" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Get data of restaurant for specified city",
        "operationId" : "restaurantbyCityData",
        "parameters" : [ {
          "name" : "cityName",
          "in" : "path",
          "description" : "name of city",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Data successfuly retrieved"
          },
          "500" : {
            "description" : "Error"
          }
        }
      }
    },
    "/nukeDB" : {
      "delete" : {
        "tags" : [ "Database" ],
        "summary" : "Clear database",
        "operationId" : "databaseNuke",
        "responses" : {
          "200" : {
            "description" : "database sucessfully cleared"
          },
          "401" : {
            "description" : "not authorized to clear database"
          },
          "500" : {
            "description" : "error clearing database"
          }
        }
      }
    },
    "/nukeDBindexes" : {
      "delete" : {
        "tags" : [ "Database" ],
        "summary" : "Clear indexes from database",
        "operationId" : "databaseClearIndexes",
        "responses" : {
          "200" : {
            "description" : "indexes successfully cleared"
          },
          "401" : {
            "description" : "not authorized to clear database"
          },
          "500" : {
            "description" : "error clearning database"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "User" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "description" : "user's e-mail serves as the id"
          },
          "todoLists" : {
            "type" : "object",
            "description" : "list of user's todo lists"
          },
          "calendars" : {
            "type" : "object",
            "description" : "list of user's calendars"
          },
          "timetables" : {
            "type" : "object",
            "description" : "list of user's timetables"
          },
          "status" : {
            "type" : "integer",
            "description" : "status of account"
          },
          "hashValue" : {
            "type" : "string",
            "description" : "password hash value"
          },
          "randomValue" : {
            "type" : "string",
            "description" : "random value used in hashing"
          },
          "validationCode" : {
            "type" : "string",
            "description" : "value used to generate the address for account validation through e-mail"
          },
          "admin" : {
            "type" : "boolean",
            "description" : "true if administrator else false"
          }
        }
      },
      "TodoList" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "description" : "Mongo generated id"
          },
          "items" : {
            "type" : "object",
            "description" : "List of todo items"
          }
        }
      },
      "TodoListItem" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "description" : "Mongo generated id"
          },
          "dueDate" : {
            "type" : "integer",
            "description" : "due date for the todo item"
          },
          "description" : {
            "type" : "string",
            "description" : "description of the todo"
          }
        }
      },
      "Calendar" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "description" : "Mongo generated id"
          },
          "events" : {
            "type" : "object",
            "description" : "List of events on the calendar"
          }
        }
      },
      "CalendarEvent" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "description" : "Mongo generated id"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of event on calendar"
          },
          "description" : {
            "type" : "string",
            "description" : "description of the calendar event"
          },
          "year" : {
            "type" : "integer",
            "description" : "Year of calendar event"
          },
          "month" : {
            "type" : "integer",
            "description" : "Month of calendar event"
          },
          "day" : {
            "type" : "integer",
            "description" : "Day of calendar event"
          }
        }
      },
      "Timetable" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "description" : "Mongo generated id"
          },
          "events" : {
            "type" : "object",
            "description" : "List of events on timetable"
          }
        }
      },
      "TimetableEvent" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "description" : "Mongo generated id"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of event on timetable"
          },
          "day" : {
            "type" : "integer",
            "description" : "Day of event on timetable"
          },
          "hour" : {
            "type" : "integer",
            "description" : "Hour of event on timetable"
          },
          "duration" : {
            "type" : "integer",
            "description" : "Duration of event on timetable"
          },
          "color" : {
            "type" : "string",
            "description" : "Hexadecimal color code of the item on timetable"
          }
        }
      }, 
      "Restaurant" : {
        "type": "object",
        "properties": {
          "id" : {
            "type": "integer",
            "description": "auto generated id of the mySQL database"
          },
          "name": {
            "type": "string",
            "description": "name of the restaurant"
          },
          "address": {
            "type": "string",
            "description": "address of the restaurant"
          },
          "city": {
            "type": "string",
            "description": "city in which the restaurant is located in"
          },
          "latitude": {
            "type": "number",
            "description": "restaurant's geolocation latitude value"
          },
          "longitude": {
            "type": "number",
            "description": "restaurant's geolocation longitude value"
          },
          "price": {
            "type": "number",
            "description": "price of the restaurant's student meal"
          },
          "surcharge": {
            "type": "number",
            "description": "surcharge of the restaurant's student meal"
          }
        }
      },
      "ClosestStation": {
        "type": "object",
        "properties": {
          "int_id": {
            "type": "integer",
            "description": "station's integer id generated by IJS API"
          },
          "latitude": {
            "type": "number",
            "description": "station's geolocation latitude value"
          },
          "longitude": {
            "type": "number",
            "description": "station's geolocation longitude value"
          },
          "name": {
            "type": "string",
            "description": "the station's name"
          }
        }
      },
      "Stations": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "buses": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "arrivals": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "description": "array or integers which represent ETAs in minutes"
                    }
                  },
                  "direction": {
                      "type": "string",
                      "description": "the direction where the bus is heading"
                  }, 
                  "number": {
                    "type": "string",
                    "description": "the bus route name"
                  }
                }
              }
            },
            "name": {
              "type": "string",
              "description": "station's name"
            },
            "number" : {
              "type": "string",
              "description": "station's LPP id"
            }
          }
        }
      },
      "ClosestRestaurants": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id" : {
              "type": "integer",
              "description": "auto generated id of the mySQL database"
            },
            "name": {
              "type": "string",
              "description": "name of the restaurant"
            },
            "address": {
              "type": "string",
              "description": "address of the restaurant"
            },
            "city": {
              "type": "string",
              "description": "city in which the restaurant is located in"
            },
            "latitude": {
              "type": "number",
              "description": "restaurant's geolocation latitude value"
            },
            "longitude": {
              "type": "number",
              "description": "restaurant's geolocation longitude value"
            },
            "price": {
              "type": "number",
              "description": "price of the restaurant's student meal"
            },
            "surcharge": {
              "type": "number",
              "description": "surcharge of the restaurant's student meal"
            },
            "distance": {
              "type": "number",
              "description": "the distance between your location and the restaurants in meters"
            }
          }
        }
      }
    }
  }
}
